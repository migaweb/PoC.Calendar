// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PoC.Calendar.Data;

namespace PoC.Calendar.Data.Migrations.EventsDb
{
    [DbContext(typeof(EventsDbContext))]
    partial class EventsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PoC.Calendar.Data.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalendarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalendarId = 1,
                            End = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Start = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Text = "Birthday"
                        },
                        new
                        {
                            Id = 2,
                            CalendarId = 1,
                            End = new DateTime(2021, 3, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Start = new DateTime(2021, 3, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Text = "Day off"
                        },
                        new
                        {
                            Id = 3,
                            CalendarId = 1,
                            End = new DateTime(2021, 3, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Start = new DateTime(2021, 3, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Text = "Work from home"
                        },
                        new
                        {
                            Id = 4,
                            CalendarId = 1,
                            End = new DateTime(2021, 4, 3, 12, 0, 0, 0, DateTimeKind.Local),
                            Start = new DateTime(2021, 4, 3, 10, 0, 0, 0, DateTimeKind.Local),
                            Text = "Online meeting"
                        },
                        new
                        {
                            Id = 5,
                            CalendarId = 1,
                            End = new DateTime(2021, 4, 3, 13, 0, 0, 0, DateTimeKind.Local),
                            Start = new DateTime(2021, 4, 3, 10, 0, 0, 0, DateTimeKind.Local),
                            Text = "Skype call"
                        },
                        new
                        {
                            Id = 6,
                            CalendarId = 1,
                            End = new DateTime(2021, 4, 3, 14, 30, 0, 0, DateTimeKind.Local),
                            Start = new DateTime(2021, 4, 3, 14, 0, 0, 0, DateTimeKind.Local),
                            Text = "Dentist appointment"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
