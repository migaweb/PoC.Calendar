@using PoC.Calendar.WASM.Shared

@inject DialogService DialogService
@inject DataAccess.IAppointmentsRepository AppointmentReporsitory
@inject NotificationService NotificationService

<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Text" />
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@model.Text" Name="Text" />
            <RadzenRequiredValidator Text="Title is required" Component="Text" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Text="Start is required" Component="Start" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="End" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" />
            <RadzenRequiredValidator Component="End" Text="End is required" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Button" Text="Delete" Click="DeleteAppointment" />
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>
@code {
  [Parameter]
  public Appointment Appointment { get; set; }

  Appointment model = new Appointment();

  protected override void OnParametersSet()
  {
      model = Appointment;
  }

  async Task DeleteAppointment()
  {
      var result = await AppointmentReporsitory.DeleteAppointment(Appointment);

      if (!result)
      {
          NotificationService.Notify(new NotificationMessage
          {
              Severity = NotificationSeverity.Warning,
              Detail = "An error occured on the server. The appointment was not deleted.",
              Duration = 30000,
              Summary = "Error"
          });

      }

      DialogService.Close(null);
  }

  void OnSubmit(Appointment model)
  {
      DialogService.Close(model);
  }
}